// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum EventType {
  WEDDING
  CONFERENCE
  PARTY
  OTHER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  language  String   @default("en")
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Adding back fields required by AuthService/UsersService
  hashedRefreshToken     String?
  isEmailVerified        Boolean              @default(false)
  emailVerificationToken String?              @unique
  staffEvents            Event[]              @relation("EventStaff")
  passwordResetTokens    PasswordResetToken[]
  events                 Event[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  userId Int // Foreign key to User
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Event {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  dateTime       DateTime
  location       String?
  language       String    @default("en")
  type           EventType
  state          String    @default("Draft")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  expectedGuests Int?
  organizerId    Int
  organizer      User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  staff  User[]  @relation("EventStaff")
  guests Guest[]

  @@index([organizerId])
}

model Guest {
  id      Int     @id @default(autoincrement())
  name    String
  email   String?
  status  String  @default("invited") // invited, confirmed, checked-in, etc.
  eventId Int
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Add more fields as needed (e.g., phone, RSVP, etc.)
}
